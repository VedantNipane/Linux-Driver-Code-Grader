{
    "compilation": {
        "success": true,
        "errors": 1,
        "warnings": 0,
        "output": "Tests/good_driver.c:4:10: fatal error: linux/uaccess.h: No such file or directory\n    4 | #include <linux/uaccess.h>\n      |          ^~~~~~~~~~~~~~~~~\ncompilation terminated.\n",
        "note": "Soft pass: missing kernel headers only"
    },
    "structure": {
        "module_init": true,
        "module_exit": true,
        "function_count": 6,
        "score": 1.0
    },
    "style": {
        "violations": 45,
        "score": 0.55,
        "output": "WARNING: Missing or malformed SPDX-License-Identifier tag in line 1\n#1: FILE: Tests/good_driver.c:1:\n+#include <linux/module.h>\n\nWARNING: please, no spaces at the start of a line\n#15: FILE: Tests/good_driver.c:15:\n+    printk(KERN_INFO \"Good driver: device opened\\n\");$\n\nWARNING: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...\n#15: FILE: Tests/good_driver.c:15:\n+    printk(KERN_INFO \"Good driver: device opened\\n\");\n\nWARNING: please, no spaces at the start of a line\n#16: FILE: Tests/good_driver.c:16:\n+    return 0;$\n\nWARNING: please, no spaces at the start of a line\n#21: FILE: Tests/good_driver.c:21:\n+    int bytes_read;$\n\nWARNING: Missing a blank line after declarations\n#22: FILE: Tests/good_driver.c:22:\n+    int bytes_read;\n+    if (*offset >= strlen(msg))\n\nWARNING: please, no spaces at the start of a line\n#22: FILE: Tests/good_driver.c:22:\n+    if (*offset >= strlen(msg))$\n\nERROR: code indent should use tabs where possible\n#23: FILE: Tests/good_driver.c:23:\n+        return 0; // EOF$\n\nWARNING: please, no spaces at the start of a line\n#23: FILE: Tests/good_driver.c:23:\n+        return 0; // EOF$\n\nWARNING: please, no spaces at the start of a line\n#25: FILE: Tests/good_driver.c:25:\n+    bytes_read = simple_read_from_buffer(buffer, length, offset, msg, strlen(msg));$\n\nWARNING: please, no spaces at the start of a line\n#26: FILE: Tests/good_driver.c:26:\n+    return bytes_read;$\n\nWARNING: please, no spaces at the start of a line\n#31: FILE: Tests/good_driver.c:31:\n+    if (len > BUF_LEN - 1)$\n\nERROR: code indent should use tabs where possible\n#32: FILE: Tests/good_driver.c:32:\n+        return -EINVAL;$\n\nWARNING: please, no spaces at the start of a line\n#32: FILE: Tests/good_driver.c:32:\n+        return -EINVAL;$\n\nWARNING: please, no spaces at the start of a line\n#34: FILE: Tests/good_driver.c:34:\n+    if (copy_from_user(msg, buff, len))$\n\nERROR: code indent should use tabs where possible\n#35: FILE: Tests/good_driver.c:35:\n+        return -EFAULT;$\n\nWARNING: please, no spaces at the start of a line\n#35: FILE: Tests/good_driver.c:35:\n+        return -EFAULT;$\n\nWARNING: please, no spaces at the start of a line\n#37: FILE: Tests/good_driver.c:37:\n+    msg[len] = '\\0';$\n\nWARNING: please, no spaces at the start of a line\n#38: FILE: Tests/good_driver.c:38:\n+    return len;$\n\nWARNING: please, no spaces at the start of a line\n#43: FILE: Tests/good_driver.c:43:\n+    printk(KERN_INFO \"Good driver: device closed\\n\");$\n\nWARNING: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...\n#43: FILE: Tests/good_driver.c:43:\n+    printk(KERN_INFO \"Good driver: device closed\\n\");\n\nWARNING: please, no spaces at the start of a line\n#44: FILE: Tests/good_driver.c:44:\n+    return 0;$\n\nWARNING: please, no spaces at the start of a line\n#48: FILE: Tests/good_driver.c:48:\n+    .read = device_read,$\n\nWARNING: please, no spaces at the start of a line\n#49: FILE: Tests/good_driver.c:49:\n+    .write = device_write,$\n\nWARNING: please, no spaces at the start of a line\n#50: FILE: Tests/good_driver.c:50:\n+    .open = device_open,$\n\nWARNING: please, no spaces at the start of a line\n#51: FILE: Tests/good_driver.c:51:\n+    .release = device_release,$\n\nWARNING: please, no spaces at the start of a line\n#56: FILE: Tests/good_driver.c:56:\n+    major = register_chrdev(0, DEVICE_NAME, &fops);$\n\nWARNING: please, no spaces at the start of a line\n#57: FILE: Tests/good_driver.c:57:\n+    if (major < 0) {$\n\nERROR: code indent should use tabs where possible\n#58: FILE: Tests/good_driver.c:58:\n+        printk(KERN_ALERT \"Registering good char device failed: %d\\n\", major);$\n\nWARNING: please, no spaces at the start of a line\n#58: FILE: Tests/good_driver.c:58:\n+        printk(KERN_ALERT \"Registering good char device failed: %d\\n\", major);$\n\nWARNING: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...\n#58: FILE: Tests/good_driver.c:58:\n+        printk(KERN_ALERT \"Registering good char device failed: %d\\n\", major);\n\nERROR: code indent should use tabs where possible\n#59: FILE: Tests/good_driver.c:59:\n+        return major;$\n\nWARNING: please, no spaces at the start of a line\n#59: FILE: Tests/good_driver.c:59:\n+        return major;$\n\nWARNING: please, no spaces at the start of a line\n#60: FILE: Tests/good_driver.c:60:\n+    }$\n\nWARNING: please, no spaces at the start of a line\n#61: FILE: Tests/good_driver.c:61:\n+    msg = kmalloc(BUF_LEN, GFP_KERNEL);$\n\nWARNING: please, no spaces at the start of a line\n#62: FILE: Tests/good_driver.c:62:\n+    if (!msg)$\n\nERROR: code indent should use tabs where possible\n#63: FILE: Tests/good_driver.c:63:\n+        return -ENOMEM;$\n\nWARNING: please, no spaces at the start of a line\n#63: FILE: Tests/good_driver.c:63:\n+        return -ENOMEM;$\n\nWARNING: please, no spaces at the start of a line\n#64: FILE: Tests/good_driver.c:64:\n+    printk(KERN_INFO \"Good sample driver loaded with major %d\\n\", major);$\n\nWARNING: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...\n#64: FILE: Tests/good_driver.c:64:\n+    printk(KERN_INFO \"Good sample driver loaded with major %d\\n\", major);\n\nWARNING: please, no spaces at the start of a line\n#65: FILE: Tests/good_driver.c:65:\n+    return 0;$\n\nWARNING: please, no spaces at the start of a line\n#70: FILE: Tests/good_driver.c:70:\n+    unregister_chrdev(major, DEVICE_NAME);$\n\nWARNING: please, no spaces at the start of a line\n#71: FILE: Tests/good_driver.c:71:\n+    kfree(msg);$\n\nWARNING: please, no spaces at the start of a line\n#72: FILE: Tests/good_driver.c:72:\n+    printk(KERN_INFO \"Good sample driver unloaded\\n\");$\n\nWARNING: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...\n#72: FILE: Tests/good_driver.c:72:\n+    printk(KERN_INFO \"Good sample driver unloaded\\n\");\n\ntotal: 6 errors, 39 warnings, 80 lines checked\n\nNOTE: For some of the reported defects, checkpatch may be able to\n      mechanically convert to the typical style using --fix or --fix-inplace.\n\nNOTE: Whitespace errors detected.\n      You may wish to use scripts/cleanpatch or scripts/cleanfile\n\nTests/good_driver.c has style problems, please review.\n\nNOTE: If any of the errors are false positives, please report\n      them to the maintainer, see CHECKPATCH in MAINTAINERS.\n"
    },
    "security": {
        "unsafe_functions": [],
        "score": 1.0
    },
    "overall_score": 81.0
}