{
    "compilation": {
        "success": true,
        "method": "gcc",
        "output": "Tests/sample_driver_strong.c:4:10: fatal error: linux/uaccess.h: No such file or directory\n    4 | #include <linux/uaccess.h>\n      |          ^~~~~~~~~~~~~~~~~\ncompilation terminated.\n",
        "errors": 1,
        "warnings": 0,
        "note": "Soft pass: missing kernel headers only"
    },
    "structure": {
        "module_init": true,
        "module_exit": true,
        "function_count": 6,
        "avg_func_len": 1.0,
        "driver_type": "char",
        "functionality_score": 1.0,
        "fops_present": [
            "open",
            "read",
            "write",
            "release"
        ]
    },
    "style": {
        "violations": 48,
        "style_score": 0.52,
        "documentation_score": 0.5,
        "maintainability_score": 0.998,
        "output": "WARNING: Missing or malformed SPDX-License-Identifier tag in line 1\n#1: FILE: Tests/sample_driver_strong.c:1:\n+#include <linux/module.h>\n\nWARNING: please, no spaces at the start of a line\n#17: FILE: Tests/sample_driver_strong.c:17:\n+    if (!mutex_trylock(&my_lock))$\n\nERROR: code indent should use tabs where possible\n#18: FILE: Tests/sample_driver_strong.c:18:\n+        return -EBUSY;$\n\nWARNING: please, no spaces at the start of a line\n#18: FILE: Tests/sample_driver_strong.c:18:\n+        return -EBUSY;$\n\nWARNING: please, no spaces at the start of a line\n#19: FILE: Tests/sample_driver_strong.c:19:\n+    printk(KERN_INFO \"Strong driver: opened\\n\");$\n\nWARNING: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...\n#19: FILE: Tests/sample_driver_strong.c:19:\n+    printk(KERN_INFO \"Strong driver: opened\\n\");\n\nWARNING: please, no spaces at the start of a line\n#20: FILE: Tests/sample_driver_strong.c:20:\n+    return 0;$\n\nWARNING: please, no spaces at the start of a line\n#25: FILE: Tests/sample_driver_strong.c:25:\n+    int bytes_read;$\n\nWARNING: Missing a blank line after declarations\n#26: FILE: Tests/sample_driver_strong.c:26:\n+    int bytes_read;\n+    if (*offset >= strlen(msg))\n\nWARNING: please, no spaces at the start of a line\n#26: FILE: Tests/sample_driver_strong.c:26:\n+    if (*offset >= strlen(msg))$\n\nERROR: code indent should use tabs where possible\n#27: FILE: Tests/sample_driver_strong.c:27:\n+        return 0;$\n\nWARNING: please, no spaces at the start of a line\n#27: FILE: Tests/sample_driver_strong.c:27:\n+        return 0;$\n\nWARNING: please, no spaces at the start of a line\n#28: FILE: Tests/sample_driver_strong.c:28:\n+    bytes_read = simple_read_from_buffer(buffer, length, offset, msg, strlen(msg));$\n\nWARNING: please, no spaces at the start of a line\n#29: FILE: Tests/sample_driver_strong.c:29:\n+    return bytes_read;$\n\nWARNING: please, no spaces at the start of a line\n#34: FILE: Tests/sample_driver_strong.c:34:\n+    if (len > BUF_LEN - 1)$\n\nERROR: code indent should use tabs where possible\n#35: FILE: Tests/sample_driver_strong.c:35:\n+        return -EINVAL;$\n\nWARNING: please, no spaces at the start of a line\n#35: FILE: Tests/sample_driver_strong.c:35:\n+        return -EINVAL;$\n\nWARNING: please, no spaces at the start of a line\n#36: FILE: Tests/sample_driver_strong.c:36:\n+    if (copy_from_user(msg, buff, len))$\n\nERROR: code indent should use tabs where possible\n#37: FILE: Tests/sample_driver_strong.c:37:\n+        return -EFAULT;$\n\nWARNING: please, no spaces at the start of a line\n#37: FILE: Tests/sample_driver_strong.c:37:\n+        return -EFAULT;$\n\nWARNING: please, no spaces at the start of a line\n#38: FILE: Tests/sample_driver_strong.c:38:\n+    msg[len] = '\\0';$\n\nWARNING: please, no spaces at the start of a line\n#39: FILE: Tests/sample_driver_strong.c:39:\n+    return len;$\n\nWARNING: please, no spaces at the start of a line\n#44: FILE: Tests/sample_driver_strong.c:44:\n+    mutex_unlock(&my_lock);$\n\nWARNING: please, no spaces at the start of a line\n#45: FILE: Tests/sample_driver_strong.c:45:\n+    printk(KERN_INFO \"Strong driver: closed\\n\");$\n\nWARNING: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...\n#45: FILE: Tests/sample_driver_strong.c:45:\n+    printk(KERN_INFO \"Strong driver: closed\\n\");\n\nWARNING: please, no spaces at the start of a line\n#46: FILE: Tests/sample_driver_strong.c:46:\n+    return 0;$\n\nWARNING: please, no spaces at the start of a line\n#50: FILE: Tests/sample_driver_strong.c:50:\n+    .read = device_read,$\n\nWARNING: please, no spaces at the start of a line\n#51: FILE: Tests/sample_driver_strong.c:51:\n+    .write = device_write,$\n\nWARNING: please, no spaces at the start of a line\n#52: FILE: Tests/sample_driver_strong.c:52:\n+    .open = device_open,$\n\nWARNING: please, no spaces at the start of a line\n#53: FILE: Tests/sample_driver_strong.c:53:\n+    .release = device_release$\n\nWARNING: please, no spaces at the start of a line\n#58: FILE: Tests/sample_driver_strong.c:58:\n+    major = register_chrdev(0, DEVICE_NAME, &fops);$\n\nWARNING: please, no spaces at the start of a line\n#59: FILE: Tests/sample_driver_strong.c:59:\n+    if (major < 0)$\n\nERROR: code indent should use tabs where possible\n#60: FILE: Tests/sample_driver_strong.c:60:\n+        return major;$\n\nWARNING: please, no spaces at the start of a line\n#60: FILE: Tests/sample_driver_strong.c:60:\n+        return major;$\n\nWARNING: please, no spaces at the start of a line\n#61: FILE: Tests/sample_driver_strong.c:61:\n+    msg = kmalloc(BUF_LEN, GFP_KERNEL);$\n\nWARNING: please, no spaces at the start of a line\n#62: FILE: Tests/sample_driver_strong.c:62:\n+    if (!msg)$\n\nERROR: code indent should use tabs where possible\n#63: FILE: Tests/sample_driver_strong.c:63:\n+        return -ENOMEM;$\n\nWARNING: please, no spaces at the start of a line\n#63: FILE: Tests/sample_driver_strong.c:63:\n+        return -ENOMEM;$\n\nWARNING: please, no spaces at the start of a line\n#64: FILE: Tests/sample_driver_strong.c:64:\n+    printk(KERN_INFO \"Strong driver loaded with major %d\\n\", major);$\n\nWARNING: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...\n#64: FILE: Tests/sample_driver_strong.c:64:\n+    printk(KERN_INFO \"Strong driver loaded with major %d\\n\", major);\n\nWARNING: please, no spaces at the start of a line\n#65: FILE: Tests/sample_driver_strong.c:65:\n+    return 0;$\n\nWARNING: please, no spaces at the start of a line\n#70: FILE: Tests/sample_driver_strong.c:70:\n+    unregister_chrdev(major, DEVICE_NAME);$\n\nWARNING: please, no spaces at the start of a line\n#71: FILE: Tests/sample_driver_strong.c:71:\n+    kfree(msg);$\n\nWARNING: please, no spaces at the start of a line\n#72: FILE: Tests/sample_driver_strong.c:72:\n+    printk(KERN_INFO \"Strong driver unloaded\\n\");$\n\nWARNING: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...\n#72: FILE: Tests/sample_driver_strong.c:72:\n+    printk(KERN_INFO \"Strong driver unloaded\\n\");\n\ntotal: 6 errors, 39 warnings, 80 lines checked\n\nNOTE: For some of the reported defects, checkpatch may be able to\n      mechanically convert to the typical style using --fix or --fix-inplace.\n\nNOTE: Whitespace errors detected.\n      You may wish to use scripts/cleanpatch or scripts/cleanfile\n\nTests/sample_driver_strong.c has style problems, please review.\n\nNOTE: If any of the errors are false positives, please report\n      them to the maintainer, see CHECKPATCH in MAINTAINERS.\n"
    },
    "security": {
        "issues": [],
        "sub_scores": {
            "memory_safety": 1.0,
            "resource_mgmt": 1.0,
            "race_conditions": 1.0,
            "input_validation": 1.0
        },
        "score": 1.0
    },
    "meta_file": "Tests/sample_driver_strong.c",
    "overall_score": 88.15,
    "breakdown": {
        "Correctness": {
            "awarded": 40.0,
            "max": 40.0,
            "details": [
                "Compilation: success (method=gcc)",
                "Soft pass: missing kernel headers only",
                "Functionality score: 1.00 -> 10.00/10"
            ]
        },
        "Security": {
            "awarded": 25.0,
            "max": 25.0,
            "details": [
                "sub_scores: {'memory_safety': 1.0, 'resource_mgmt': 1.0, 'race_conditions': 1.0, 'input_validation': 1.0}"
            ]
        },
        "Code Quality": {
            "awarded": 13.15,
            "max": 20.0,
            "details": [
                {
                    "style_score": 0.52,
                    "documentation_score": 0.5,
                    "maintainability_score": 0.998
                }
            ]
        },
        "Performance": {
            "awarded": 10.0,
            "max": 10.0,
            "details": [
                "avg_func_len: 1.0"
            ]
        },
        "Advanced": {
            "awarded": 0.0,
            "max": 5.0,
            "details": []
        }
    }
}